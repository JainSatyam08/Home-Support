
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author jains
 */
public class Updateempspadmstatusframe extends javax.swing.JFrame {
     String mem_type, mem_id, adm_id,password;
    /**
     * Creates new form Updateempspadmstatusframe
     */
    public Updateempspadmstatusframe() {
        initComponents();
        lblname.setVisible(true);              
        lblstatus.setVisible(false);
        lblnewstatus.setVisible(false);
        cmbstatus.setVisible(false);
        btupdate.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbmemtype = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textmemid = new javax.swing.JTextField();
        textadmid = new javax.swing.JTextField();
        textpass = new javax.swing.JTextField();
        btenter = new javax.swing.JButton();
        btreset = new javax.swing.JButton();
        bthome = new javax.swing.JButton();
        lblname = new javax.swing.JLabel();
        lblnewstatus = new javax.swing.JLabel();
        cmbstatus = new javax.swing.JComboBox<>();
        btupdate = new javax.swing.JButton();
        lblstatus = new javax.swing.JLabel();
        lblmess = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(248, 228, 184));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 750));

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 36)); // NOI18N
        jLabel1.setText("UPDATE STATUS ");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setText("Select Member Type");

        cmbmemtype.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmbmemtype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MEMBER", "Employee", "Service Partner", "Admin" }));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel3.setText("Enter Member Id");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setText("Enter Your Admin Id");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel5.setText("Enter Password");

        textmemid.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        textadmid.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        textpass.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        btenter.setBackground(new java.awt.Color(0, 204, 51));
        btenter.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        btenter.setText("ENTER");
        btenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btenterActionPerformed(evt);
            }
        });

        btreset.setBackground(new java.awt.Color(255, 255, 0));
        btreset.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        btreset.setText("RESET");
        btreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btresetActionPerformed(evt);
            }
        });

        bthome.setBackground(new java.awt.Color(204, 0, 51));
        bthome.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        bthome.setText("HOME");
        bthome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bthomeActionPerformed(evt);
            }
        });

        lblname.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N

        lblnewstatus.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblnewstatus.setText("Select New Status");

        cmbstatus.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmbstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "STATUS", "Active", "Inactive", "Block", "Unblock" }));

        btupdate.setBackground(new java.awt.Color(0, 153, 153));
        btupdate.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        btupdate.setText("UPDATE STATUS");
        btupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btupdateActionPerformed(evt);
            }
        });

        lblstatus.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N

        lblmess.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bthome)
                                .addGap(106, 106, 106)
                                .addComponent(btreset)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btenter))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(74, 74, 74)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbmemtype, 0, 258, Short.MAX_VALUE)
                                    .addComponent(textmemid)
                                    .addComponent(textadmid)
                                    .addComponent(textpass)))
                            .addComponent(lblname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblnewstatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                                .addComponent(cmbstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblstatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblmess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(69, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btupdate)
                .addGap(219, 219, 219))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbmemtype))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(textmemid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(textadmid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(textpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btenter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bthome)
                        .addComponent(btreset)))
                .addGap(26, 26, 26)
                .addComponent(lblname, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblnewstatus)
                    .addComponent(cmbstatus))
                .addGap(18, 18, 18)
                .addComponent(lblmess, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btupdate)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btenterActionPerformed
        mem_type=cmbmemtype.getSelectedItem().toString();
        mem_id=textmemid.getText().trim();
        adm_id=textadmid.getText().trim();
        password=textpass.getText().trim();
        if(mem_type.equalsIgnoreCase("MEMBER")){
            lblname.setText("Select Valid Member Type");
            return;
        }
        if(mem_id.isEmpty()){
            lblname.setText("Enter Member Id");
            return;
        }
        if(adm_id.isEmpty()){
            lblname.setText("Enter Your Head Admin Id");
            return;
        }
        if(password.isEmpty()){
            lblname.setText("Enter Your Valid Passwor");
            return;
        }
        try{
            Class.forName("com.mysql.jdbc.Driver");
	    Connection con=DriverManager.getConnection("jdbc:mysql://localhost/homesupport?user=root&password=satyam");
            String qry="Select * from admin where adm_id=? and adm_password=? and desig='Head Admin'";
            PreparedStatement ps= con.prepareStatement(qry);
            ps.setString(1,adm_id);
            ps.setString(2,password);
            ResultSet rs=ps.executeQuery();
            if (rs.next()) {
               if(mem_type.equalsIgnoreCase("Employee")){
                   String qry1="Select emp_name,status from employee where emp_id=?";
                   PreparedStatement ps1=con.prepareStatement(qry1);
                   ps1.setString(1,mem_id);
                   ResultSet rs1=ps1.executeQuery();
                   if(rs1.next()){
                       lblname.setVisible(true);
                       lblname.setText("Member Name: " + rs1.getString("emp_name"));
                       lblstatus.setVisible(true);
                       lblstatus.setText("Member's Status: " + rs1.getString("status"));
                       lblnewstatus.setVisible(true);
                       cmbstatus.setVisible(true);
                       btupdate.setVisible(true);
                   }
                   else{
                        lblstatus.setVisible(false);
                        lblnewstatus.setVisible(false);
                        cmbstatus.setVisible(false);
                        btupdate.setVisible(false);
                        lblstatus.setText("");
                        cmbstatus.setSelectedIndex(0);
                        lblname.setText("Member Not found!!check Membertype!!");
                   }
               }
               else if(mem_type.equalsIgnoreCase("Service Partner")){
                   String qry1="Select sp_name,sp_status from partner where sp_id=?";
                   PreparedStatement ps1=con.prepareStatement(qry1);
                   ps1.setString(1,mem_id);
                   ResultSet rs1=ps1.executeQuery();
                   if(rs1.next()){
                       lblname.setVisible(true);
                       lblname.setText("Member Name: " + rs1.getString("sp_name"));
                       lblstatus.setVisible(true);
                       lblstatus.setText("Member's Status: " + rs1.getString("sp_status"));
                       lblnewstatus.setVisible(true);
                       cmbstatus.setVisible(true);
                       btupdate.setVisible(true);
                   }
                   else{
                       lblstatus.setVisible(false);
                        lblnewstatus.setVisible(false);
                        cmbstatus.setVisible(false);
                        btupdate.setVisible(false);
                        lblstatus.setText("");
                        cmbstatus.setSelectedIndex(0);
                       lblname.setText("Member Not found!!check Membertype!!");
                   }
               }
               else if(mem_type.equalsIgnoreCase("Admin")){
                   String qry1="Select adm_name,status from admin where adm_id=?";
                   PreparedStatement ps1=con.prepareStatement(qry1);
                   ps1.setString(1,mem_id);
                   ResultSet rs1=ps1.executeQuery();
                   if(rs1.next()){
                       lblname.setVisible(true);
                       lblname.setText("Member Name: " + rs1.getString("adm_name"));
                       lblstatus.setVisible(true);
                       lblstatus.setText("Member's Status: " + rs1.getString("status"));
                       lblnewstatus.setVisible(true);
                       cmbstatus.setVisible(true);
                       btupdate.setVisible(true);
                   }
                   else{
                        lblstatus.setVisible(false);
                        lblnewstatus.setVisible(false);
                        cmbstatus.setVisible(false);
                        btupdate.setVisible(false);
                        lblstatus.setText("");
                        cmbstatus.setSelectedIndex(0);
                        lblname.setText("Member Not found!!check Membertype!!");
                   }
               }
               
            } 
            else {
                lblstatus.setVisible(false);
                lblstatus.setText("");
                cmbstatus.setSelectedIndex(0);
                lblnewstatus.setVisible(false);
                cmbstatus.setVisible(false);
                btupdate.setVisible(false);
                lblname.setText("Unauthorisation Detected!!!");
            }            
        }
        catch(Exception e){
              System.out.println(e);
        }
    }//GEN-LAST:event_btenterActionPerformed

    private void btupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btupdateActionPerformed
        String status=cmbstatus.getSelectedItem().toString();
        if(status.equalsIgnoreCase("STATUS")){
            lblmess.setText("Enter Valid Status");
            return;
        }
        try{
            lblmess.setText("");
            Class.forName("com.mysql.jdbc.Driver");
	    Connection con=DriverManager.getConnection("jdbc:mysql://localhost/homesupport?user=root&password=satyam");
            if(mem_type.equalsIgnoreCase("Employee")){
                String qry="update employee set status=? where emp_id=?";
                PreparedStatement ps1=con.prepareStatement(qry);
                ps1.setString(1,status);
                ps1.setString(2,mem_id);
                int a=ps1.executeUpdate();
                if(a==1){
                    String qry1="select emp_name,status from employee where emp_id=?";
                    PreparedStatement ps2=con.prepareStatement(qry1);
                    ps2.setString(1,mem_id);
                    ResultSet rs1=ps2.executeQuery();
                    if(rs1.next()){
                        lblname.setVisible(true);
                        lblname.setText("Member Name: " + rs1.getString("emp_name"));
                        lblstatus.setVisible(true);
                        lblstatus.setText("Member's Status: " + rs1.getString("status"));
                        lblnewstatus.setVisible(false);
                        cmbstatus.setVisible(false);
                        btupdate.setVisible(false);
                    }
                    else{
                        lblname.setVisible(true);
                        lblname.setText("Member Name: " + rs1.getString("emp_name"));
                        lblstatus.setVisible(true);
                        lblstatus.setText("Member's Status: " + rs1.getString("status"));
                        lblnewstatus.setVisible(true);
                        cmbstatus.setVisible(true);
                        cmbstatus.setSelectedIndex(0);
                        btupdate.setVisible(true);
                    }
                }   
                else{
                    
                    lblmess.setText("Not Updated");
                }
            }
            else if(mem_type.equalsIgnoreCase("Service Partner")){
                String qry="update partner set sp_status=? where sp_id=?";
                PreparedStatement ps1=con.prepareStatement(qry);
                ps1.setString(1,status);
                ps1.setString(2,mem_id);
                int a=ps1.executeUpdate();
                if(a==1){
                    String qry1="select sp_name,sp_status from partner where sp_id=?";
                    PreparedStatement ps2=con.prepareStatement(qry1);
                    ps2.setString(1,mem_id);
                    ResultSet rs1=ps2.executeQuery();
                    if(rs1.next()){
                        lblname.setVisible(true);
                        lblname.setText("Member Name: " + rs1.getString("sp_name"));
                        lblstatus.setVisible(true);
                        lblstatus.setText("Member's Status: " + rs1.getString("sp_status"));
                        lblnewstatus.setVisible(false);
                        cmbstatus.setVisible(false);
                        btupdate.setVisible(false);
                    }
                    else{
                        lblname.setVisible(true);
                        lblname.setText("Member Name: " + rs1.getString("sp_name"));
                        lblstatus.setVisible(true);
                        lblstatus.setText("Member's Status: " + rs1.getString("sp_status"));
                        lblnewstatus.setVisible(true);
                        cmbstatus.setVisible(true);
                        cmbstatus.setSelectedIndex(0);
                        btupdate.setVisible(true);
                        lblmess.setText("Not Updated");
                    }
                }   
                else{
                    
                    lblmess.setText("Updation Failed!!");
                }
            }
            else if(mem_type.equalsIgnoreCase("Admin")){
                String qry="update admin set status=? where adm_id=?";
                PreparedStatement ps1=con.prepareStatement(qry);
                ps1.setString(1,status);
                ps1.setString(2,mem_id);
                int a=ps1.executeUpdate();
                if(a==1){
                    String qry1="select adm_name,status from admin where adm_id=?";
                    PreparedStatement ps2=con.prepareStatement(qry1);
                    ps2.setString(1,mem_id);
                    ResultSet rs1=ps2.executeQuery();
                    if(rs1.next()){
                        lblname.setVisible(true);
                        lblname.setText("Member Name: " + rs1.getString("adm_name"));
                        lblstatus.setVisible(true);
                        lblstatus.setText("Member's Status: " + rs1.getString("status"));
                        lblnewstatus.setVisible(false);
                        cmbstatus.setVisible(false);
                        btupdate.setVisible(false);
                    }
                    else{
                        lblname.setVisible(true);
                        lblname.setText("Member Name: " + rs1.getString("adm_name"));
                        lblstatus.setVisible(true);
                        lblstatus.setText("Member's Status: " + rs1.getString("status"));
                        lblnewstatus.setVisible(true);
                        cmbstatus.setVisible(true);
                        cmbstatus.setSelectedIndex(0);
                        btupdate.setVisible(true);
                        lblmess.setText("Not Updated");
                    }
                }   
                else{
                    
                    lblmess.setText("Updation Failed!!");
                }
            }
            else{
                lblmess.setText("Select Valid Status");
            }
               
            
            
        }
        catch(Exception e){
              System.out.println(e);
        }
    }//GEN-LAST:event_btupdateActionPerformed

    private void btresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btresetActionPerformed
        cmbmemtype.setSelectedIndex(0);
        textadmid.setText("");
        textmemid.setText("");
        textpass.setText("");
        lblname.setText("");
        lblnewstatus.setVisible(false);
        cmbstatus.setSelectedIndex(0);
        cmbstatus.setVisible(false);
        lblstatus.setVisible(false);
        lblstatus.setText("");
        btupdate.setVisible(false);
        lblmess.setText("");
    }//GEN-LAST:event_btresetActionPerformed

    private void bthomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bthomeActionPerformed
        dispose();
        new Adminheadhomeframe().setVisible(true);
    }//GEN-LAST:event_bthomeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Updateempspadmstatusframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Updateempspadmstatusframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Updateempspadmstatusframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Updateempspadmstatusframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Updateempspadmstatusframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btenter;
    private javax.swing.JButton bthome;
    private javax.swing.JButton btreset;
    private javax.swing.JButton btupdate;
    private javax.swing.JComboBox<String> cmbmemtype;
    private javax.swing.JComboBox<String> cmbstatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblmess;
    private javax.swing.JLabel lblname;
    private javax.swing.JLabel lblnewstatus;
    private javax.swing.JLabel lblstatus;
    private javax.swing.JTextField textadmid;
    private javax.swing.JTextField textmemid;
    private javax.swing.JTextField textpass;
    // End of variables declaration//GEN-END:variables
}
